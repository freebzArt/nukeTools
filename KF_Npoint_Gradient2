set cut_paste_input [stack 0]
version 14.0 v6
push $cut_paste_input
Group {
 name KF_Npoint_Gradient2
 knobChanged "node = nuke.thisNode()\nknob = nuke.thisKnob()\nname = knob.name()\n\n\nif \"_\" in name:\n    num = name.split( \"_\" )\[1]\n\nif name.startswith( \"point\" ):\n    if node.knob( \"k_auto\" ).getValue():\n        source = node.node( \"Input\" )\n        sample = node.knob( \"k_sample\" ).getValue()\n\n        point = node.knob( \"point_%s\" % num ).getValue()\n        tempcolor = \[ source.sample( \"r\", point\[0], point\[1], sample, sample ),\n                      source.sample( \"g\", point\[0], point\[1], sample, sample ),\n                      source.sample( \"b\", point\[0], point\[1], sample, sample ) ]\n        node.knob( \"color_%s\" % num ).setValue( tempcolor )\n\nif name.startswith( \"enable\" ):\n    if knob.getValue():\n        node.knob( \"point_%s\" % num ).clearFlag( nuke.DISABLED )\n        node.knob( \"color_%s\" % num ).clearFlag( nuke.DISABLED )\n        node.knob( \"get_%s\" % num ).clearFlag( nuke.DISABLED )\n    else:\n        node.knob( \"point_%s\" % num ).setFlag( nuke.DISABLED )\n        node.knob( \"color_%s\" % num ).setFlag( nuke.DISABLED )\n        node.knob( \"get_%s\" % num ).setFlag( nuke.DISABLED )\n"
 tile_color 0x4e73ffff
 selected true
 xpos -559
 ypos 292
 addUserKnob {20 k_points l Gradient}
 addUserKnob {26 k_nn l "" +STARTLINE T "<font color=\"cornflower blue\" size=10>KF N-point Gradient<font color=\"gray\" size=2>v2.02</font>"}
 addUserKnob {26 k_kf l "" +STARTLINE T "<font color=\"gray\">by Kevin Fisch</font>"}
 addUserKnob {26 k_div2 l "" +STARTLINE}
 addUserKnob {3 k_n l INVISIBLE +INVISIBLE}
 k_n 6
 addUserKnob {22 k_add l "Add Point" t "Adds a sample point for the gradient." T "node = nuke.thisNode()\nn = int( node\[ \"k_n\" ].getValue() ) + 1\nnode\[ \"k_n\" ].setValue( n )\n\n\nnode_in = nuke.toNode( \"Input\" )\nnode_top = nuke.toNode( \"Remover\" )\nnode_out = nuke.toNode( \"Depth\" )\n\n\n# get sampled position\n# bbox is from the center of the image, -1 to 1, based on width\nviewer = nuke.activeViewer()\nbbox = viewer.node()\[ \"colour_sample_bbox\" ].value()\nratio = float( node_in.width() ) / float( node_in.height() )\naspect = node_in.pixelAspect()\ncx = ( bbox\[0] + bbox\[2] ) / 2\ncy = ( bbox\[1] + bbox\[3] ) / 2\nposition = \[ ( ( cx * 0.5 ) + 0.5 ) * node_in.width(),\n             ( ( cy * ratio * aspect * 0.5 ) + 0.5 ) * node_in.height() ]\n\n\nnode.addKnob( nuke.Text_Knob( \"div_%s\" % n, \"\" ) )\n\n\nknob_enab = nuke.Boolean_Knob( \"enable_%s\" % n, \"\" )\nknob_enab.setValue( True )\nnode.addKnob( knob_enab )\n\n\nknob_pt = nuke.XY_Knob( \"point_%s\" % n, \"Point %s\" % n )\nknob_pt.clearFlag( nuke.STARTLINE )\nnode.addKnob( knob_pt )\n\n\nknob_col = nuke.Color_Knob( \"color_%s\" % n, \"Point %s Color\" % n )\nnode.addKnob( knob_col )\n\n\nknob_get = nuke.PyScript_Knob( \"get_%s\" % n, \"Get Color\" , \"\"\"\\\nnode = nuke.thisNode()\nknob = nuke.thisKnob()\nsource = node.node( \"Input\" )\nsample = node.knob( \"k_sample\" ).getValue()\nn = int( knob.name().split( \"_\" )\[1] )\n\npoint = node.knob( \"point_%s\" % n ).getValue()\ntempcolor = \[ source.sample( \"r\", point\[0], point\[1], sample, sample ),\n              source.sample( \"g\", point\[0], point\[1], sample, sample ),\n              source.sample( \"b\", point\[0], point\[1], sample, sample ) ]\nnode.knob( \"color_%s\" % n ).setValue( tempcolor )\n\"\"\" )\nnode.addKnob( knob_get )\n\n\nif node\[ \"k_autoplace\" ].value():\n    knob_pt.setValue( ( position\[0], position\[1] ) )\nelse:\n    if node.input( 0 ):\n        knob_pt.setValue( ( node_in.width()/2, node_in.height()/2 ) )\n    else:\n        knob_pt.setValue( ( nuke.Root().width()/2, nuke.Root().height()/2 ) )\n\nif node\[ \"k_auto\" ].value() and node.input( 0 ):\n    # nuke.Script_Knob.execute( knob_get )\n    sample = node.knob( \"k_sample\" ).getValue()\n    tempcolor = \[ node_in.sample( \"r\", position\[0], position\[1], sample, sample ),\n                  node_in.sample( \"g\", position\[0], position\[1], sample, sample ),\n                  node_in.sample( \"b\", position\[0], position\[1], sample, sample ) ]\n    knob_col.setValue( tempcolor )\n\n\n#deselects all nodes to prevent any errors while creating nodes\nnodes = nuke.allNodes( group = node )\nfor node in nodes:\n  name = node\[ \"selected\" ].setValue( False )\n\n\n#creates expression node\nexp = nuke.nodes.Expression()\nexp.setName( \"Exp_%s\" % n )\nexp.setXYpos( ( 100 * ( n - 1 ) ), 50 )\nexp.knob( \"expr0\" ).setValue( \"color_%s.r\" % n )\nexp.knob( \"expr1\" ).setValue( \"color_%s.g\" % n )\nexp.knob( \"expr2\" ).setValue( \"color_%s.b\" % n )\nexp.knob( \"expr3\" ).setValue( \"hypot( x-point_%s.x, y-point_%s.y )\" % ( n, n ) )\nexp.knob( \"disable\" ).setExpression( \"1-parent.enable_%s\" % n )\nexp.setInput( 0, node_top )\n\n\n#creates merge expression node\nif n > 1:\n    merge = nuke.nodes.MergeExpression()\n    merge.setName( \"MergeExp_%s\" % n )\n    merge.setXYpos( 0, ( 70 * ( n - 1 ) ) + 60 )\n    merge.knob( \"expr0\" ).setValue( \"Aa < Ba ? Ar : Br\" )\n    merge.knob( \"expr1\" ).setValue( \"Aa < Ba ? Ag : Bg\" )\n    merge.knob( \"expr2\" ).setValue( \"Aa < Ba ? Ab : Bb\" )\n    merge.knob( \"expr3\" ).setValue( \"min( Aa , Ba )\" )\n    merge.knob( \"disable\" ).setExpression( \"1-parent.enable_%s\" % n )\n\n    if n == 2:\n        input1 = nuke.toNode( \"Exp_1\" )\n    else:\n        input1 = nuke.toNode( \"MergeExp_%s\" % ( n - 1 ) )\n\n    merge.setInput( 0, input1 )\n    merge.setInput( 1, exp )\n    node_out.setInput( 0, merge )\n\n\nif n == 1:\n    node_out.setInput( 0 , exp )\n" +STARTLINE}
 addUserKnob {26 k_spacer l "" -STARTLINE T "\t\t\t"}
 addUserKnob {22 k_reset l "<font color=\"red\">Reset</font>" t "Deletes all points and starts anew. What'd you think it did?" -STARTLINE T "node = nuke.thisNode()\n\n\n# remove knobs\nknob_list = dict( node.knobs() )\nfor knob_name in knob_list:\n    # keep all knobs that start with \"k_\"\n    if knob_name.startswith( \"k_\" ):\n        pass\n    else:\n        # if it doesn't start with \"k_\" it's either a default knob, or an added knob\n        # if it can be removed, we added it, if not, it's a default knob\n        try:\n            node.removeKnob( knob_list\[ knob_name ] )\n        except:\n            pass\n\n# reset the point counter back to 0\nnode.knob( \"k_n\" ).setValue( 0 )\n\n# remove nodes\nkeepers = \[ \"Input\", \"Output\" ]\nfor node in nuke.allNodes( group = node ):\n    # keep input/output so things don't get disconnected during reset\n    if node.Class() in keepers:\n        pass\n    else:\n        nuke.delete( node )\n\ninput = nuke.toNode( \"Input\" )\ninput.setXYpos( -300, 0 )\n\n# recreate nodes\nremove = nuke.nodes.Remove()\nremove.setName( \"Remover\" )\nremove.setXYpos( 0, 0 )\nremove.setInput( 0, input )\n\ndepth = nuke.nodes.Shuffle()\ndepth.setName( \"Depth\" )\ndepth\[ \"in\" ].setValue( \"alpha\" )\ndepth\[ \"out\" ].setValue( \"depth\" )\ndepth.setXYpos( -300, 600 )\ndepth.setInput( 0, remove )\n\nblur = nuke.nodes.Blur()\nblur.setName( \"Blender\" )\nblur\[ \"size\" ].setSingleValue( False )\nblur\[ \"size\" ].setExpression( \"(width/50)*parent.k_mult.w\", 0 )\nblur\[ \"size\" ].setExpression( \"(width/50)*parent.k_mult.h\", 1 )\nblur.setXYpos( -300, 630 )\nblur.setInput( 0, depth )\n\nalpha = nuke.nodes.Shuffle( alpha = 6 )\nalpha.setName( \"Alpha\" )\nalpha.setXYpos( -300, 680 )\nalpha.setInput( 0, blur )\n\noutput = nuke.toNode( \"Output\" )\noutput.setXYpos( -300, 710 )\noutput.setInput( 0, alpha )\n"}
 addUserKnob {26 k_div l "" +STARTLINE}
 addUserKnob {6 k_auto l "Auto Sample Color" t "When enabled, new points and points that are moved will automatically sample the color." +STARTLINE}
 k_auto true
 addUserKnob {6 k_autoplace l "Autoplace New Points" t "When enabled, it will add new points in the center of sampled area in the viewer. (ctrl click)" -STARTLINE}
 k_autoplace true
 addUserKnob {7 k_sample l "Sample Size" R 0 10}
 k_sample 5
 addUserKnob {14 k_mult l "Blur Multiplier" R 0 100}
 k_mult 5
 addUserKnob {22 k_getall l "Get All Point Colors" t "\"This button will sample the colors in the source image at the chosen points, and put that value into the point's color. Since this process is computationally expensive it's done on demand only. With this button, you can choose important frames and keyframe the color values after sampling.\"\n\n -MM" T "node = nuke.thisNode()\nsource = node.node( \"Input\" )\nsample = node.knob( \"k_sample\" ).getValue()\npoints = int(  node.knob( \"k_n\" ).getValue() )\n\nfor i in range( 1, points + 1 ):\n    if node.knob( \"enable_%s\" % i ).getValue():\n        point = node.knob( \"point_%s\" % i ).getValue()\n        tempcolor = \[ source.sample( \"r\", point\[0], point\[1], sample, sample ),\n                      source.sample( \"g\", point\[0], point\[1], sample, sample ),\n                      source.sample( \"b\", point\[0], point\[1], sample, sample ) ]\n\n        node.knob( \"color_%s\" % i ).setValue( tempcolor )\n" +STARTLINE}
 addUserKnob {26 div_1 l "" +STARTLINE}
 addUserKnob {6 enable_1 l "" -STARTLINE}
 enable_1 true
 addUserKnob {12 point_1 l "Point 1" -STARTLINE}
 point_1 {897.5999451 1133.760002}
 addUserKnob {18 color_1 l "Point 1 Color"}
 color_1 {0.3131178319 0.5649596453 0.1805735677}
 addUserKnob {6 color_1_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {22 get_1 l "Get Color" -STARTLINE T "node = nuke.thisNode()\nknob = nuke.thisKnob()\nsource = node.node( \"Input\" )\nsample = node.knob( \"k_sample\" ).getValue()\nn = int( knob.name().split( \"_\" )\[1] )\n\npoint = node.knob( \"point_%s\" % n ).getValue()\ntempcolor = \[ source.sample( \"r\", point\[0], point\[1], sample, sample ),\n              source.sample( \"g\", point\[0], point\[1], sample, sample ),\n              source.sample( \"b\", point\[0], point\[1], sample, sample ) ]\nnode.knob( \"color_%s\" % n ).setValue( tempcolor )\n"}
 addUserKnob {26 div_2 l "" +STARTLINE}
 addUserKnob {6 enable_2 l "" -STARTLINE}
 enable_2 true
 addUserKnob {12 point_2 l "Point 2" -STARTLINE}
 point_2 {3174 774}
 addUserKnob {18 color_2 l "Point 2 Color"}
 color_2 {0.2471482158 0.4585210681 0.1340487152}
 addUserKnob {6 color_2_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {22 get_2 l "Get Color" -STARTLINE T "node = nuke.thisNode()\nknob = nuke.thisKnob()\nsource = node.node( \"Input\" )\nsample = node.knob( \"k_sample\" ).getValue()\nn = int( knob.name().split( \"_\" )\[1] )\n\npoint = node.knob( \"point_%s\" % n ).getValue()\ntempcolor = \[ source.sample( \"r\", point\[0], point\[1], sample, sample ),\n              source.sample( \"g\", point\[0], point\[1], sample, sample ),\n              source.sample( \"b\", point\[0], point\[1], sample, sample ) ]\nnode.knob( \"color_%s\" % n ).setValue( tempcolor )\n"}
 addUserKnob {26 div_3 l "" +STARTLINE}
 addUserKnob {6 enable_3 l "" -STARTLINE}
 enable_3 true
 addUserKnob {12 point_3 l "Point 3" -STARTLINE}
 point_3 {2836 1804}
 addUserKnob {18 color_3 l "Point 3 Color"}
 color_3 {0.2397953123 0.453564167 0.1342392117}
 addUserKnob {6 color_3_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {22 get_3 l "Get Color" -STARTLINE T "node = nuke.thisNode()\nknob = nuke.thisKnob()\nsource = node.node( \"Input\" )\nsample = node.knob( \"k_sample\" ).getValue()\nn = int( knob.name().split( \"_\" )\[1] )\n\npoint = node.knob( \"point_%s\" % n ).getValue()\ntempcolor = \[ source.sample( \"r\", point\[0], point\[1], sample, sample ),\n              source.sample( \"g\", point\[0], point\[1], sample, sample ),\n              source.sample( \"b\", point\[0], point\[1], sample, sample ) ]\nnode.knob( \"color_%s\" % n ).setValue( tempcolor )\n"}
 addUserKnob {26 div_4 l "" +STARTLINE}
 addUserKnob {6 enable_4 l "" -STARTLINE}
 enable_4 true
 addUserKnob {12 point_4 l "Point 4" -STARTLINE}
 point_4 {1146 1888}
 addUserKnob {18 color_4 l "Point 4 Color"}
 color_4 {0.2821242809 0.5259739757 0.1620693952}
 addUserKnob {6 color_4_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {22 get_4 l "Get Color" -STARTLINE T "node = nuke.thisNode()\nknob = nuke.thisKnob()\nsource = node.node( \"Input\" )\nsample = node.knob( \"k_sample\" ).getValue()\nn = int( knob.name().split( \"_\" )\[1] )\n\npoint = node.knob( \"point_%s\" % n ).getValue()\ntempcolor = \[ source.sample( \"r\", point\[0], point\[1], sample, sample ),\n              source.sample( \"g\", point\[0], point\[1], sample, sample ),\n              source.sample( \"b\", point\[0], point\[1], sample, sample ) ]\nnode.knob( \"color_%s\" % n ).setValue( tempcolor )\n"}
 addUserKnob {26 div_5 l "" +STARTLINE}
 addUserKnob {6 enable_5 l "" -STARTLINE}
 enable_5 true
 addUserKnob {12 point_5 l "Point 5" -STARTLINE}
 point_5 {1260 462}
 addUserKnob {18 color_5 l "Point 5 Color"}
 color_5 {0.2780150771 0.5193016529 0.1555508375}
 addUserKnob {6 color_5_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {22 get_5 l "Get Color" -STARTLINE T "node = nuke.thisNode()\nknob = nuke.thisKnob()\nsource = node.node( \"Input\" )\nsample = node.knob( \"k_sample\" ).getValue()\nn = int( knob.name().split( \"_\" )\[1] )\n\npoint = node.knob( \"point_%s\" % n ).getValue()\ntempcolor = \[ source.sample( \"r\", point\[0], point\[1], sample, sample ),\n              source.sample( \"g\", point\[0], point\[1], sample, sample ),\n              source.sample( \"b\", point\[0], point\[1], sample, sample ) ]\nnode.knob( \"color_%s\" % n ).setValue( tempcolor )\n"}
 addUserKnob {26 div_6 l "" +STARTLINE}
 addUserKnob {6 enable_6 l "" -STARTLINE}
 enable_6 true
 addUserKnob {12 point_6 l "Point 6" -STARTLINE}
 point_6 {2682 224}
 addUserKnob {18 color_6 l "Point 6 Color"}
 color_6 {0.2279656678 0.4392685592 0.1299358159}
 addUserKnob {6 color_6_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {22 get_6 l "Get Color" -STARTLINE T "node = nuke.thisNode()\nknob = nuke.thisKnob()\nsource = node.node( \"Input\" )\nsample = node.knob( \"k_sample\" ).getValue()\nn = int( knob.name().split( \"_\" )\[1] )\n\npoint = node.knob( \"point_%s\" % n ).getValue()\ntempcolor = \[ source.sample( \"r\", point\[0], point\[1], sample, sample ),\n              source.sample( \"g\", point\[0], point\[1], sample, sample ),\n              source.sample( \"b\", point\[0], point\[1], sample, sample ) ]\nnode.knob( \"color_%s\" % n ).setValue( tempcolor )\n"}
}
 Input {
  inputs 0
  name Input
  xpos -300
 }
 Remove {
  name Remover
  xpos 0
 }
set Nc8c52000 [stack 0]
 Expression {
  expr0 color_6.r
  expr1 color_6.g
  expr2 color_6.b
  expr3 "hypot( x-point_6.x, y-point_6.y )"
  name Exp_6
  xpos 500
  ypos 50
  disable {{1-parent.enable_6}}
 }
push $Nc8c52000
 Expression {
  expr0 color_5.r
  expr1 color_5.g
  expr2 color_5.b
  expr3 "hypot( x-point_5.x, y-point_5.y )"
  name Exp_5
  xpos 400
  ypos 50
  disable {{1-parent.enable_5}}
 }
push $Nc8c52000
 Expression {
  expr0 color_4.r
  expr1 color_4.g
  expr2 color_4.b
  expr3 "hypot( x-point_4.x, y-point_4.y )"
  name Exp_4
  xpos 300
  ypos 50
  disable {{1-parent.enable_4}}
 }
push $Nc8c52000
 Expression {
  expr0 color_3.r
  expr1 color_3.g
  expr2 color_3.b
  expr3 "hypot( x-point_3.x, y-point_3.y )"
  name Exp_3
  xpos 200
  ypos 50
  disable {{1-parent.enable_3}}
 }
push $Nc8c52000
 Expression {
  expr0 color_2.r
  expr1 color_2.g
  expr2 color_2.b
  expr3 "hypot( x-point_2.x, y-point_2.y )"
  name Exp_2
  xpos 100
  ypos 50
  disable {{1-parent.enable_2}}
 }
push $Nc8c52000
 Expression {
  expr0 color_1.r
  expr1 color_1.g
  expr2 color_1.b
  expr3 "hypot( x-point_1.x, y-point_1.y )"
  name Exp_1
  xpos 0
  ypos 50
  disable {{1-parent.enable_1}}
 }
 MergeExpression {
  inputs 2
  expr0 "Aa < Ba ? Ar : Br"
  expr1 "Aa < Ba ? Ag : Bg"
  expr2 "Aa < Ba ? Ab : Bb"
  expr3 "min( Aa , Ba )"
  name MergeExp_2
  xpos 0
  ypos 130
  disable {{1-parent.enable_2}}
 }
 MergeExpression {
  inputs 2
  expr0 "Aa < Ba ? Ar : Br"
  expr1 "Aa < Ba ? Ag : Bg"
  expr2 "Aa < Ba ? Ab : Bb"
  expr3 "min( Aa , Ba )"
  name MergeExp_3
  xpos 0
  ypos 200
  disable {{1-parent.enable_3}}
 }
 MergeExpression {
  inputs 2
  expr0 "Aa < Ba ? Ar : Br"
  expr1 "Aa < Ba ? Ag : Bg"
  expr2 "Aa < Ba ? Ab : Bb"
  expr3 "min( Aa , Ba )"
  name MergeExp_4
  xpos 0
  ypos 270
  disable {{1-parent.enable_4}}
 }
 MergeExpression {
  inputs 2
  expr0 "Aa < Ba ? Ar : Br"
  expr1 "Aa < Ba ? Ag : Bg"
  expr2 "Aa < Ba ? Ab : Bb"
  expr3 "min( Aa , Ba )"
  name MergeExp_5
  xpos 0
  ypos 340
  disable {{1-parent.enable_5}}
 }
 MergeExpression {
  inputs 2
  expr0 "Aa < Ba ? Ar : Br"
  expr1 "Aa < Ba ? Ag : Bg"
  expr2 "Aa < Ba ? Ab : Bb"
  expr3 "min( Aa , Ba )"
  name MergeExp_6
  xpos 0
  ypos 410
  disable {{1-parent.enable_6}}
 }
 Shuffle {
  in alpha
  out depth
  name Depth
  xpos -300
  ypos 600
 }
 Blur {
  size {{(width/50)*parent.k_mult.w} {(width/50)*parent.k_mult.h}}
  name Blender
  xpos -300
  ypos 630
 }
 Shuffle {
  alpha white
  name Alpha
  xpos -300
  ypos 680
 }
 Output {
  name Output
  xpos -300
  ypos 710
 }
end_group
